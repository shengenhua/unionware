package com.unionware.wms.ui.fragment;import android.content.Intent;import android.os.Build;import android.os.Bundle;import android.os.Handler;import android.view.View;import android.widget.EditText;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import androidx.activity.OnBackPressedCallback;import androidx.activity.result.ActivityResultLauncher;import androidx.activity.result.contract.ActivityResultContracts;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.fragment.app.Fragment;import androidx.recyclerview.widget.LinearLayoutManager;import com.chad.library.adapter.base.BaseQuickAdapter;import com.chad.library.adapter.base.listener.OnItemChildClickListener;import com.lxj.xpopup.XPopup;import com.lxj.xpopup.impl.LoadingPopupView;import com.unionware.wms.R;import com.unionware.wms.URLPath;import com.unionware.wms.databinding.CommonStockScanFragmentBinding;import com.unionware.wms.inter.scan.CommonListContract;import com.unionware.wms.inter.scan.CommonListPresenter;import com.unionware.wms.inter.scan.StockScanContract;import com.unionware.wms.inter.scan.StockScanPresenter;import unionware.base.api.util.ConvertUtils;import unionware.base.app.utils.DateFormatUtils;import unionware.base.app.utils.ToastUtil;import unionware.base.app.view.base.viewbinding.BaseBindFragment;import unionware.base.model.bean.BarcodeBean;import unionware.base.model.bean.BaseInfoBean;import unionware.base.model.bean.BillBean;import unionware.base.model.bean.EntityBean;import com.unionware.wms.model.event.TaskIdEvent;import unionware.base.model.bean.PropertyBean;import unionware.base.model.bean.TaskIdBean;import unionware.base.model.req.FiltersReq;import com.unionware.wms.model.req.PageIdReq;import unionware.base.model.req.ItemBean;import unionware.base.model.req.TaskIdReq;import unionware.base.model.req.TaskReq;import unionware.base.model.req.ViewReq;import com.unionware.wms.ui.activity.BarcodeEditActivity;import com.unionware.wms.ui.activity.BaseInfoListActivity;import com.unionware.wms.ui.activity.DetailsDeleteActivity;import com.unionware.wms.ui.adapter.BarcodeInfoContentAdapter;import com.unionware.wms.ui.adapter.StockScanAdapter;import com.unionware.wms.ui.adapter.ViewPagerAdapter;import com.unionware.wms.utlis.CommonUtils;import org.greenrobot.eventbus.EventBus;import org.greenrobot.eventbus.Subscribe;import org.greenrobot.eventbus.ThreadMode;import java.io.Serializable;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.stream.Collectors;import javax.inject.Inject;import dagger.hilt.android.AndroidEntryPoint;import unionware.base.model.resp.AnalysisResp;import unionware.base.ui.datepicker.CustomDatePicker;@AndroidEntryPointpublic class StockScanFragment extends BaseBindFragment<CommonStockScanFragmentBinding> implements StockScanContract.View, OnItemChildClickListener,        CommonListContract.View, StockScanAdapter.OnEditorActionChangeListener, View.OnClickListener {    @Inject    StockScanPresenter presenter;    @Inject    CommonListPresenter summaryPresenter;    private StockScanAdapter adapter;    private List<EntityBean> editList; // 可编辑的列表    private ActivityResultLauncher<Intent> launcher;    private LoadingPopupView loading;    private List<EntityBean> origData; // 官方数据    private ViewReq req;    private AnalysisResp analysisResp;    private boolean isContainer = false; // 是否为容器条码，默认无    private String taskId;    private boolean isTask = false; // 是否从任务列表点击进去的    private String container; // 容器条码    private boolean isPack = false; // 是否为包装条码    private boolean checkDefault = true; // 在每次点击【确认录入】后    private boolean isFirst = true;    @Override    public void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        presenter.attach(this);        summaryPresenter.attach(this);        registerActivityResult();        requireActivity().getOnBackPressedDispatcher().addCallback(this, new OnBackPressedCallback(true) {            @Override            public void handleOnBackPressed() {                if (null != req && null != req.getPageId()) {                    presenter.destroyScanView(new PageIdReq(req.getPageId()));                }            }        });    }    public static StockScanFragment newInstance(BillBean bean, String scene) {        Bundle args = new Bundle();        StockScanFragment fragment = new StockScanFragment();        args.putSerializable("bean", bean);        args.putString("scene", scene);        fragment.setArguments(args);        return fragment;    }    @Override    public void initData() {        BillBean bean = (BillBean) getArguments().getSerializable("bean");        loading = new XPopup.Builder(mContext).dismissOnTouchOutside(false).asLoading("初始化配置中...");        adapter = new StockScanAdapter();        adapter.addChildClickViewIds(R.id.iv_base_info_query, R.id.tv_scan_default, R.id.tv_scan_lock);        adapter.setOnEditorActionChangeListener(this);        adapter.setOnItemChildClickListener(this);        getMBind().rvScanList.setHasFixedSize(true);        getMBind().rvScanList.setLayoutManager(new LinearLayoutManager(mContext));        getMBind().rvScanList.setAdapter(adapter);        // 展示列表显示        getMBind().rvShowList.setLayoutManager(new LinearLayoutManager(mContext));        Map<String, Object> map = new HashMap<>();        map.put("primaryId", bean.getFlowId());        presenter.getScanConfigData(getArguments().getString("scene"), new FiltersReq(map));        List<TaskIdBean> items = new ArrayList<>();        items.add(new TaskIdBean(bean.getFormId(), bean.getId()));        isTask = URLPath.Stock.PATH_STOCK_IN_PROGRESS_TASK_CODE.equals(bean.getFormId());        if (isTask) {            Map<String, Object> test = new HashMap<>();            taskId = bean.getId();            test.put("TaskId", taskId);            presenter.createScanView(new ViewReq("UNW_WMS_INPUT_STOCK", test));        } else {            presenter.createScanTask(new TaskReq(bean.getPrimaryId(), Integer.parseInt(bean.getFlowId()), items));        }        getMBind().btnScanConfirm.setOnClickListener(this);        getMBind().btnScanDelete.setOnClickListener(this);        getMBind().btnScanClose.setOnClickListener(this);        getMBind().btnScanEdit.setOnClickListener(this);        TextView tv_submit = getActivity().findViewById(R.id.tv_scan_in_progress);        tv_submit.setVisibility(View.VISIBLE);        tv_submit.setText("提交");        tv_submit.setOnClickListener(view -> {            new XPopup.Builder(mContext).asConfirm("提示", "是否提交？", () -> {                if (null != taskId) {                    presenter.submitTask(new TaskIdReq(Integer.valueOf(taskId)));                }            }).show();        });    }    @Override    public void onClick(View view) {        int viewId = view.getId();        if (viewId == R.id.btn_scan_confirm) { // 确认录入            submitScanData(); // 提交录入        } else if (viewId == R.id.btn_scan_delete) {            // 转化当前实体类            if (null == container || "".equals(container)) {                ToastUtil.showToastCenter("请先扫描容器条码！");                return;            }            Intent intent = new Intent(mContext, DetailsDeleteActivity.class);            intent.putExtra("container", container);            intent.putExtra("pageId", req.getPageId());            intent.putExtra("TaskId", taskId);            startActivity(intent);        } else if (viewId == R.id.btn_scan_close) {            ViewReq viewReq = new ViewReq("INVOKE_CLOSECONTAINER", req.getPageId());            presenter.closeContainer(viewReq);            adapter.resetData();            container = "";        } else if (viewId == R.id.btn_scan_edit) {            if (analysisResp == null || null == analysisResp.getFEntity()) {                ToastUtil.showToastCenter( "请先扫描条码！");                return;            }            jumpToEditBarcode(ConvertUtils.convertMapToEntityList(origData, analysisResp));        }    }    private void submitScanData() {        if (analysisResp == null || null == analysisResp.getFEntity()) {            ToastUtil.showToastCenter( "请先扫描条码！");            return;        }        presenter.submitScanView(new ViewReq("INVOKE_SUBMITCODE", req.getPageId()));    }    private void jumpToEditBarcode(List<List<EntityBean>> list) {        Intent intent = new Intent(mContext, BarcodeEditActivity.class);        intent.putExtra("list", (Serializable) list);        intent.putExtra("isContainer", isContainer);        intent.putExtra("pageId", req.getPageId());        startActivity(intent);    }    @Override    public void showFailedView(String msg) {        ToastUtil.showToastCenter( msg);    }    @Override    public void showList(List<BillBean> list) {        getMBind().vpSummaryList.setVisibility(View.VISIBLE);        initTab(list);    }    @Override    public void setUserVisibleHint(boolean isVisibleToUser) {        super.setUserVisibleHint(isVisibleToUser);        if (!isFirst && isVisibleToUser && null != adapter) {            adapter.findCurrentFocusable();        }    }    @Override    public void showEmptyView() {        getMBind().vpSummaryList.setVisibility(View.GONE);    }    @Override    public void initScanItem(List<EntityBean> list, boolean isContainer) {        this.isContainer = isContainer;        origData = list;        if (isContainer) {            PropertyBean bean = new PropertyBean("FContainer", "容器条码");            bean.setEntity("FBillHead");            EntityBean item = new EntityBean(bean);            item.setEdit(true);            origData.add(0, item);        }        PropertyBean bean = new PropertyBean("FLPN", "扫描条码");        bean.setEntity("FBillHead");        EntityBean item = new EntityBean(bean);        item.setEdit(true);        if (isContainer) {            origData.add(1, item);        } else {            origData.add(0, item);        }        editList = origData.stream().filter(EntityBean::isEdit).collect(Collectors.toList());        adapter.setNewInstance(editList);    }    @Override    public void initConfigInfo(TaskIdBean bean) {        Map<String, Object> map = new HashMap<>();        map.put("TaskId", bean.getPrimaryId());        taskId = bean.getPrimaryId();        EventBus.getDefault().post(new TaskIdEvent(bean.getPrimaryId()));        presenter.createScanView(new ViewReq("UNW_WMS_INPUT_STOCK", map));    }    @Override    public boolean enableEventBus() {        return true;    }    @Override    public void onCompleteView(String id) {        req = new ViewReq(id);        EventBus.getDefault().post(req);        if (isTask) {            EventBus.getDefault().post(new TaskIdEvent(taskId));        }        // 汇总（未完成）        getSummaryList(id);    }    private void getSummaryList(String id) {        ViewReq summaryReq = new ViewReq("INVOKE_SUMMARY", id);        Map<String, Object> map = new HashMap<>();        map.put("type", "2");  // 显示【未完成】任务汇总        summaryReq.setParams(map);        summaryPresenter.getSummaryList(summaryReq);    }    @Override    public void showDialog(String tips) {        loading.setTitle(tips);        loading.show();    }    @Override    public void dismissDialog() {        loading.dismiss();    }    @Override    public void showTipsDialog(TaskIdReq req, String tips) {        new XPopup.Builder(mContext).asConfirm("提示", tips, () -> {            presenter.submitTask(req);        }).show();    }    @Override    public void finishUI() {        getActivity().finish();    }    @Override    public void onItemChildClick(@NonNull BaseQuickAdapter<?, ?> baseQuickAdapter, @NonNull View view, int position) {        int id = view.getId();        if (id == R.id.iv_base_info_query) {            String type = adapter.getData().get(position).getProperty().getType();            if ("BASEDATA".equals(type) || "ASSISTANT".equals(type)) { // 基础资料                EntityBean bean = (EntityBean) adapter.getData().get(position);                Intent intent = new Intent(getActivity(), BaseInfoListActivity.class);                intent.putExtra("key", bean.getProperty().getTag());                intent.putExtra("parentId", bean.getProperty().getParentId());                intent.putExtra("position", position);                launcher.launch(intent);            } else if ("DATETIME".equals(adapter.getData().get(position).getProperty().getType())) {                initTimePick(getMBind().rvScanList.getChildAt(position).findViewById(R.id.et_scan_input), position);            }        } else if (id == R.id.tv_scan_lock) { // 锁定            EditText editText = getMBind().rvScanList.getChildAt(position).findViewById(R.id.et_scan_input); //获取当前文本输入框            ImageView iv_lock = getMBind().rvScanList.getChildAt(position).findViewById(R.id.tv_scan_lock);            EntityBean bean = (EntityBean) adapter.getData().get(position);            boolean isLock = bean.isLock(); // 当前锁住状态            bean.setLock(!isLock);            if (!bean.isEdit()) return;            ImageView iv = (ImageView) adapter.getViewByPosition(position, R.id.iv_base_info_query);            iv.setEnabled(!bean.isLock());            iv_lock.setImageResource(!isLock ? unionware.base.R.drawable.dw_lock : unionware.base.R.drawable.dw_unlock);            if (!bean.isLock() && bean.isDefalut()) return; // 如果在取消【锁定】时，还勾选了默认 那编辑框不能获取焦点            requireViewFocusable(editText, !bean.isLock());            adapter.findCurrentFocusable(position);        } else if (id == R.id.tv_scan_default) { // 默认            EditText editText = getMBind().rvScanList.getChildAt(position).findViewById(R.id.et_scan_input); //获取当前文本输入框            ImageView iv_default = getMBind().rvScanList.getChildAt(position).findViewById(R.id.tv_scan_default);            EntityBean bean = adapter.getData().get(position);            boolean isDefault = bean.isDefalut(); // 当前默认状态            if (!bean.isEdit()) return; // 如果不可编辑 不予点击处理            bean.setDefalut(!isDefault);            ImageView iv = (ImageView) adapter.getViewByPosition(position, R.id.iv_base_info_query);            iv.setEnabled(!bean.isDefalut());            iv_default.setImageResource(!isDefault ? R.drawable.ic_defalut : R.drawable.ic_undefalut);            requireViewFocusable(editText, !bean.isDefalut());            adapter.findCurrentFocusable(position);        }    }    private void initTimePick(EditText editText, int pos) {        //时间选择器        long beginTimestamp = DateFormatUtils.str2Long("1980-01-01", false);        long endTimestamp = DateFormatUtils.str2Long("2100-01-01", false);        CustomDatePicker picker = new CustomDatePicker(mContext, timestamp -> {            EntityBean bean = adapter.getData().get(pos);            String time = DateFormatUtils.long2Str(timestamp, false);            adapter.getData().get(pos).setValue(time);            editText.setText(time);            ItemBean item = new ItemBean(bean.getProperty().getKey(), editText.getText().toString());            List<ItemBean> list = new ArrayList<>();            list.add(item);            if (req != null) {                req.setItems(list);                presenter.updateScanView(req, pos);            }        }, beginTimestamp, endTimestamp);        picker.setCancelable(false);        // 不显示时和分        picker.setCanShowPreciseTime(false);        // 不允许循环滚动        picker.setScrollLoop(false);        // 不允许滚动动画        picker.setCanShowAnim(false);        picker.show(System.currentTimeMillis());    }    /**     * 请求焦点     *     * @param view     * @param enable     */    private void requireViewFocusable(EditText view, boolean enable) {        view.setEnabled(enable);        view.setFocusable(enable);        view.setFocusableInTouchMode(enable);    }    private void registerActivityResult() {        launcher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {            Intent data = result.getData();            if (data == null) return;            int code = result.getResultCode(); // 更新位置            BaseInfoBean infoBean = Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU ? data.getSerializableExtra("baseInfo", BaseInfoBean.class) : (BaseInfoBean) data.getSerializableExtra("baseInfo");            EntityBean bean = adapter.getData().get(code);            bean.setValue(infoBean != null ? infoBean.getCode() : null);            if(infoBean != null){                bean.setId(CommonUtils.isInteger(infoBean.getId()) ? Integer.parseInt(infoBean.getId()) : 0);            }            adapter.notifyItemChanged(code);            // 拼请求参数            ItemBean item = new ItemBean(bean.getProperty().getKey(), infoBean != null ? infoBean.getCode() : null);            List<ItemBean> list = new ArrayList<>();            list.add(item);            if (req != null) {                req.setItems(list);                presenter.updateScanView(req, code);            }        });    }    @Override    public void onEditorActionListener(@Nullable EditText view, @NonNull EntityBean bean, int position) {        if ("FContainer".equals(bean.getProperty().getKey())) {            container = view.getText().toString().trim();        }        List<ItemBean> list = new ArrayList<>();        if (checkDefault) {  //  首次进行获取默认值列表进行更新            checkDefault = false;            list = adapter.getDefaultValueList();        }        String val = view.getText().toString();        ItemBean item = new ItemBean(bean.getProperty().getKey(), val);        if ("FLPN".equals(bean.getProperty().getKey())) { //如果扫描的是条码，就先必须更新条码后才能更新下方值            list.add(0, item);        } else {            list.add(item);        }        if (req != null) {            req.setItems(list);            req.setParams(new HashMap<>());            presenter.updateScanView(req, position);        }    }    @Subscribe(threadMode = ThreadMode.MAIN)    public void upDateViewEvent(AnalysisResp data) {        analysisResp = data;    }    @Override    public void onCompleteUpdateView(AnalysisResp data, int pos) {        analysisResp = data;        Map<String, BarcodeBean> billHead = data.getFBillHead().get(0);        if (billHead.containsKey("FBarcodeType")) {            isPack = "PackageBarCode".equals(billHead.get("FBarcodeType").getValue());            adapter.setEditable("QTYFIELD", !isPack);        }        initControlView(data); // 判断【容器条码】显示、隐藏按钮        matchAnalysisToUI(data, pos);        // 可编辑列表总数 - （当前已默认 + 当前已锁定 + 是否为容器条码（y：2 n：1） == 0 ）表示没有操作的        boolean isCanSubmit = adapter.getData().size() - (adapter.isFinish() + (isContainer ? 2 : 1)) <= 0; // 是否可以提交        if ((isCanSubmit && pos != 0) || adapter.isCanSubmit(pos)) {            submitScanData();        }    }    @Override    public void errorUpdate(String tips, int pos) {        ToastUtil.showToastCenter( tips);        EditText editText = (EditText) adapter.getViewByPosition(pos, R.id.et_scan_input);        editText.setSelection(0, editText.getText().length());    }    /**     * 匹配并渲染解析数据返回到编辑框中     *     * @param data     */    private void matchAnalysisToUI(AnalysisResp data, int index) {//        index++;        for (int i = 0; i < origData.size(); i++) {            EntityBean bean = origData.get(i);            List<Map<String, BarcodeBean>> list = "FBillHead".equals(bean.getProperty().getEntity()) ? data.getFBillHead() : data.getFEntity();            // 遍历元数据            if (null != list && !list.isEmpty()) {                updateItem(list.get(0), bean, i);            } else {                // 当单据体字段为空时，应该将所有单据体字段可编辑设为不可编辑                adapter.setEntityEnable(false);            }        }        adapter.notifyDataSetChanged();        int finalIndex = index;        new Handler().postDelayed(() -> {            adapter.findCurrentFocusable(finalIndex);        }, 50);    }    /**     * 控制下方【关闭容器】 【删除明细】 【逐条编辑】的隐藏、显示逻辑     * 若当前条码携带多条数据，则界面自动显示【逐条编辑】按钮     * 若界面存在【容器条码】字段且有值，则界面不显示【逐条编辑】按钮，下方增加显示关闭容器、删除明细按钮     *     * @param data     */    private void initControlView(AnalysisResp data) {        boolean isShow = null != data.getFEntity() && !data.getFEntity().isEmpty();        if (isShow) {            getMBind().rvShowList.setAdapter(new BarcodeInfoContentAdapter(ConvertUtils.convertMapToDisplayList(origData, data)));        }        Map<String, BarcodeBean> map = data.getFBillHead().get(0);        // 隐藏【逐条编辑】【关闭容器】 【条码删除】按钮        boolean isVisible = data.getFEntity().size() < 2;        boolean isContainer = map.containsKey("FContainer") && null != map.get("FContainer").getValue() && !"".equals(map.get("FContainer").getValue());        getMBind().btnScanClose.setVisibility(isContainer && isVisible ? View.VISIBLE : View.GONE);        getMBind().btnScanDelete.setVisibility(isContainer && isVisible ? View.VISIBLE : View.GONE);        getMBind().btnScanEdit.setVisibility(isVisible ? View.GONE : View.VISIBLE);    }    /**     * @param tips     * @param reset true  提交单据成功  false 录入信息成功     */    @Override    public void onSuccessSubmit(String tips, boolean reset) {        analysisResp = null;        ToastUtil.showToastCenter( tips);        if (reset) {            getActivity().setResult(URLPath.Stock.PATH_SUBMIT_FINISH);            getActivity().finish();        } else {            checkDefault = true;  //初始化自动提交标识            adapter.clearData();            getSummaryList(req.getPageId());            new Handler().postDelayed(() -> {                adapter.findCurrentFocusable(0);            }, 50);        }    }    private void initTab(List<BillBean> list) {        List<Fragment> mFragments = new ArrayList<>();        for (int i = 0; i < list.size(); i++) {            mFragments.add(ViewPageListFragment.newInstance(list.get(i)));        }        ViewPagerAdapter vpAdapter = new ViewPagerAdapter(getActivity().getSupportFragmentManager());        vpAdapter.setFragments(mFragments);        getMBind().vpSummaryList.setCurrentItem(0);        getMBind().vpSummaryList.setOffscreenPageLimit(3);        getMBind().vpSummaryList.setAdapter(vpAdapter);        vpAdapter.notifyDataSetChanged();        adapter.findCurrentFocusable(0);        isFirst = false;    }    private void updateItem(Map<String, BarcodeBean> map, EntityBean bean, int pos) {        if (bean.isDefalut()) return;   // 如果勾选了默认，不进行更新操作        String key = bean.getProperty().getKey(); // 字段标识        String type = bean.getProperty().getType(); // 字段类型        if (map.containsKey(key) && null != map.get(key)) {            String id = map.get(key).getId()==null?null:map.get(key).getId().toString();            String val = "ASSISTANT".equals(type) || "BASEDATA".equals(type) ? map.get(key).getNumber() : map.get(key).getValue();            bean.setValue(val);            bean.setEdit(map.get(key).isEnabled());            if ("DECIMAL".equals(type) || "INTEGER ".equals(type)) {                bean.setId(null != id && !"".equals(id) ? Integer.valueOf(id) : 0);            }        }    }    @Override    public void initObserve() {    }}